import { LLM_MODELS } from "../utilities/llmInfo";
import { getCodeGeneratePrompt } from "../utilities/prompts";
import { ClaudeAIService } from "./ClaudeAIService";
import { OpenAIService } from "./OpenAIService";
import { TokenLimiter } from "./TokenLimiter";
import * as yaml from "js-yaml";

interface CodeResponse {
    codeChanges: CodeChanges;
    calculatedTokens: number;
    inputTokens: number;
    outputTokens: number;
    cost: number;
}

export class CodingAssistant {
    constructor() {}

    async generateCode(
        model: string,
        task: string,
        plan: string,
        files: FileDetails[]
    ): Promise<CodeResponse | null> {
        console.log(`Generating code for task: ${task} with model: ${model}`);

        // retrieve the code prompt
        const prompt = getCodeGeneratePrompt(task, plan);

        // enforce model token limit
        const { totalTokens, allowedFiles } = TokenLimiter.applyTokenLimit(model, prompt, files);

        // construct final prompt with allowed files
        const allowedFilesContent = allowedFiles
            .map((file) => `File: ${file.path}\n${file.content}`)
            .join("\n---\n");
        const finalPrompt = prompt.replace("[[EXISTING_CODE_FILES]]", allowedFilesContent);
        console.log("\n------------------ -------- START ---------- ------------------\n\n");
        console.log("Final prompt:", finalPrompt);
        console.log("\n------------------ -------- END ---------- ------------------\n\n");

        // pick the ai model
        const aiService =
            model === LLM_MODELS.OPENAI_GPT_4O || LLM_MODELS.OPENAI_GPT_4O_MINI
                ? new OpenAIService()
                : new ClaudeAIService();

        // generate code
        const {
            response: code,
            inputTokens,
            outputTokens,
            cost,
        } = await aiService.generateResponse(finalPrompt);
        console.log("\n------------------ ------------------ ------------------\n\n");
        console.log(">>> Code generated by Coding Assistant >>>>:", code);

        // parse the response
        const codeChangesNeeded = code.match(/```yaml([\s\S]*?)```/);
        if (codeChangesNeeded && codeChangesNeeded[1]) {
            try {
                const codeChanges = yaml.load(codeChangesNeeded[1].trim()) as CodeChanges;

                return {
                    codeChanges,
                    calculatedTokens: totalTokens,
                    inputTokens,
                    outputTokens,
                    cost,
                };
            } catch (e) {
                console.error("Failed to parse YAML response:", e);
            }
        } else {
            console.error("No YAML content found in the response.");
        }

        return null;
    }
}
